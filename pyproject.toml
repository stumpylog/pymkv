[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pymkv"
description = "A Python wrapper for mkvmerge. It provides support for muxing, splitting, linking, chapters, tags, and attachments through the use of mkvmerge."
readme = "README.md"
requires-python = ">=3.6"
license = {text = "MIT"}
authors = [
    {name = "Sheldon Woodward", email = "me@sheldonw.com"},
    {name = "Trenton H", email = "rda0128ou@mozmail.com"}
]
keywords = ["wrapper"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Topic :: Multimedia :: Video :: Conversion",
    "Topic :: Utilities",
]
dependencies = [
    "bitmath",
    "iso639-lang"
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/sheldonkwoodward/pymkv"


[tool.hatch.version]
path = "pymkv/__about__.py"

[tool.hatch.envs.default]
installer = "uv"

[tool.hatch.envs.hatch-test]
# https://hatch.pypa.io/latest/config/internal/testing/
parallel = false
randomize = true
extra-dependencies = [
  "pytest-sugar",
]

extra-args = [ "--maxprocesses=8", "--pythonwarnings=all" ]

[tool.hatch.envs.hatch-test.scripts]
run = [
  "python3 --version",
  "pytest{env:HATCH_TEST_ARGS:} {args}",
]

run-cov = [
  "python3 --version",
  "coverage erase",
  "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}",
]
cov-combine = [ "coverage combine" ]
cov-report = [
  "coverage report",
  "coverage json",
  "coverage html",
]

[tool.coverage.run]
source_pkgs = [ "pymkv", "tests" ]
branch = true
parallel = true
omit = [
  "src/pymkv/__about__.py",
  "tests/conftest.py",
  "tests/utils.py",
]

[tool.coverage.paths]
pymkv = [ "pymkv" ]
tests = [ "tests" ]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == '__main__':",
  "if TYPE_CHECKING:",
  "if SAVE_OUTPUTS:",
]
exclude_also = [
    "def __repr__",
]